// Copyright (c) 2018 Palantir Technologies. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package integration_test

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"os"
	"path"
	"path/filepath"
	"regexp"
	"strings"
	"testing"

	"github.com/nmiyake/pkg/dirs"
	"github.com/palantir/godel/framework/pluginapitester"
	"github.com/palantir/godel/pkg/products/v2/products"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestConjurePlugin(t *testing.T) {
	const (
		conjureSpecYML = `
types:
  definitions:
    default-package: com.palantir.conjure.test.api
    objects:
      TestCase:
        fields:
          name: string
`
		conjureSpecJSON = `
{
  "version" : 1,
  "errors" : [ ],
  "types" : [ {
    "type" : "object",
    "object" : {
      "typeName" : {
        "name" : "TestCase",
        "package" : "com.palantir.conjure.test.api"
      },
      "fields" : [ {
        "fieldName" : "name",
        "type" : {
          "type" : "primitive",
          "primitive" : "STRING"
        }
      } ]
    }
  } ],
  "services" : [ ]
}
`
		yamlDir              = "yamlDir"
		conjureYMLSubstitute = `
projects:
  project-1:
    output-dir: conjure-output
    ir-locator: ` + yamlDir + `
  project-2:
    output-dir: conjure-output2
    ir-locator:
      type: remote
      locator: SUBSTITUTE_URL
`
	)

	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprint(w, conjureSpecJSON)
	}))
	defer ts.Close()

	pluginPath, err := products.Bin("conjure-plugin")
	require.NoError(t, err)

	projectDir, cleanup, err := dirs.TempDir(".", "")
	require.NoError(t, err)
	ymlDir := path.Join(projectDir, yamlDir)
	err = os.Mkdir(ymlDir, 0755)
	require.NoError(t, err)
	defer cleanup()
	err = os.MkdirAll(path.Join(projectDir, "godel", "config"), 0755)
	require.NoError(t, err)
	conjureYML := strings.Replace(conjureYMLSubstitute, "SUBSTITUTE_URL", ts.URL, -1)
	err = ioutil.WriteFile(path.Join(projectDir, "godel", "config", "conjure-plugin.yml"), []byte(conjureYML), 0644)
	require.NoError(t, err)

	err = ioutil.WriteFile(path.Join(ymlDir, "conjure.yml"), []byte(conjureSpecYML), 0644)
	require.NoError(t, err)

	outputBuf := &bytes.Buffer{}
	runPluginCleanup, err := pluginapitester.RunPlugin(pluginapitester.NewPluginProvider(pluginPath), nil, "conjure", nil, projectDir, false, outputBuf)
	defer runPluginCleanup()
	require.NoError(t, err, outputBuf.String())

	for _, outputName := range []string{"conjure-output", "conjure-output2"} {
		contentBytes, err := ioutil.ReadFile(path.Join(projectDir, outputName, "conjure", "test", "api", "structs.conjure.go"))
		require.NoError(t, err)
		wantContent := `// This file was generated by Conjure and should not be manually edited.

package api

type TestCase struct {
	Name string ` + "`" + `json:"name" yaml:"name,omitempty"` + "`" + `
}
`
		assert.Equal(t, wantContent, string(contentBytes), "Got:\n%s", string(contentBytes))
	}
}

func TestConjurePluginVerify(t *testing.T) {
	const (
		conjureSpecYML = `
types:
  definitions:
    default-package: com.palantir.base.api
    objects:
      BaseType:
        fields:
          id: string
`
		yamlDir = "yamlDir"
	)

	pluginPath, err := products.Bin("conjure-plugin")
	require.NoError(t, err)

	projectDir, cleanup, err := dirs.TempDir(".", "")
	require.NoError(t, err)
	ymlDir := path.Join(projectDir, yamlDir)
	err = os.Mkdir(ymlDir, 0755)
	require.NoError(t, err)
	defer cleanup()

	err = os.MkdirAll(path.Join(projectDir, "godel", "config"), 0755)
	require.NoError(t, err)
	err = ioutil.WriteFile(path.Join(projectDir, "godel", "config", "conjure-plugin.yml"), []byte(`
projects:
  project-1:
    output-dir: conjure
    ir-locator: `+yamlDir+`
`), 0644)
	require.NoError(t, err)

	err = ioutil.WriteFile(path.Join(ymlDir, "conjure.yml"), []byte(conjureSpecYML), 0644)
	require.NoError(t, err)

	outputBuf := &bytes.Buffer{}
	runPluginCleanup, err := pluginapitester.RunPlugin(pluginapitester.NewPluginProvider(pluginPath), nil, "conjure", nil, projectDir, false, outputBuf)
	defer runPluginCleanup()
	require.NoError(t, err, outputBuf.String())

	outputBuf = &bytes.Buffer{}
	_, err = pluginapitester.RunPlugin(pluginapitester.NewPluginProvider(pluginPath), nil, "conjure", []string{"verify"}, projectDir, false, outputBuf)
	require.NoError(t, err, outputBuf.String())

	structsFile := filepath.Join("conjure", "base", "api", "structs.conjure.go")
	err = ioutil.WriteFile(filepath.Join(projectDir, structsFile), []byte("package api"), 0644)
	require.NoError(t, err, "failed to change generated file")

	outputBuf = &bytes.Buffer{}
	_, err = pluginapitester.RunPlugin(pluginapitester.NewPluginProvider(pluginPath), nil, "conjure", []string{"--verify"}, projectDir, false, outputBuf)
	assert.Error(t, err, "modified file did not trigger verify fail")
	stdout := outputBuf.String()
	assert.True(t, strings.Contains(stdout, structsFile+": checksum changed"), "Unexpected standard out: %s", stdout)
}

func TestConjurePluginPublish(t *testing.T) {
	const (
		conjureSpecYML = `
types:
  definitions:
    default-package: com.palantir.conjure.test.api
    objects:
      TestCase:
        fields:
          name: string
`
		yamlDir    = "yamlDir"
		conjureYML = `
projects:
  project-1:
    output-dir: conjure-output
    ir-locator: ` + yamlDir + `
`
	)

	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {}))
	defer ts.Close()

	pluginPath, err := products.Bin("conjure-plugin")
	require.NoError(t, err)

	projectDir, cleanup, err := dirs.TempDir(".", "")
	require.NoError(t, err)
	ymlDir := path.Join(projectDir, yamlDir)
	err = os.Mkdir(ymlDir, 0755)
	require.NoError(t, err)
	defer cleanup()
	err = os.MkdirAll(path.Join(projectDir, "godel", "config"), 0755)
	require.NoError(t, err)
	err = ioutil.WriteFile(path.Join(projectDir, "godel", "config", "conjure-plugin.yml"), []byte(conjureYML), 0644)
	require.NoError(t, err)

	err = ioutil.WriteFile(path.Join(ymlDir, "conjure.yml"), []byte(conjureSpecYML), 0644)
	require.NoError(t, err)

	outputBuf := &bytes.Buffer{}
	runPluginCleanup, err := pluginapitester.RunPlugin(pluginapitester.NewPluginProvider(pluginPath), nil, "conjure-publish", []string{
		"--dry-run",
		"--group-id=com.palantir.test-group",
		"--repository=test-repo",
		"--url=" + ts.URL,
		"--username=test-username",
		"--password=test-password",
	}, projectDir, false, outputBuf)
	defer runPluginCleanup()
	require.NoError(t, err, outputBuf.String())

	lines := strings.Split(outputBuf.String(), "\n")
	assert.Equal(t, 3, len(lines), "Expected output to have 3 lines:\n%s", outputBuf.String())

	wantRegexp := regexp.QuoteMeta("[DRY RUN]") + " Uploading .*?" + regexp.QuoteMeta(".ir.json") + " to " + regexp.QuoteMeta(ts.URL+"/artifactory/test-repo/com/palantir/test-group/project-1/") + ".*?" + regexp.QuoteMeta("/project-1-") + ".*?" + regexp.QuoteMeta(".ir.json")
	assert.Regexp(t, wantRegexp, lines[0])

	wantRegexp = regexp.QuoteMeta("[DRY RUN]") + " Uploading to " + regexp.QuoteMeta(ts.URL+"/artifactory/test-repo/com/palantir/test-group/") + ".*?" + regexp.QuoteMeta(".pom")
	assert.Regexp(t, wantRegexp, lines[1])
}

func TestUpgradeConfig(t *testing.T) {
	pluginPath, err := products.Bin("conjure-plugin")
	require.NoError(t, err)
	pluginProvider := pluginapitester.NewPluginProvider(pluginPath)

	pluginapitester.RunUpgradeConfigTest(t,
		pluginProvider,
		nil,
		[]pluginapitester.UpgradeConfigTestCase{
			{
				Name: "legacy config fails to upgrade",
				ConfigFiles: map[string]string{
					"godel/config/conjure.yml": `
conjure-projects:
  # comment
  project-1:
    project-file: ./conjure-project.yml
  project-2:
    project-file: foo/conjure-project.yml
  project-3:
    project-file: bar/conjure-project.yml
`,
				},
				Legacy:     true,
				WantError:  true,
				WantOutput: "Failed to upgrade configuration:\n\tgodel/config/conjure-plugin.yml: failed to upgrade configuration: v0 configuration is not supported\n",
			},
			{
				Name: "blank legacy config upgrade succeeds",
				ConfigFiles: map[string]string{
					"godel/config/conjure-plugin.yml": ``,
				},
				WantFiles: map[string]string{
					"godel/config/conjure-plugin.yml": ``,
				},
				Legacy:     true,
				WantOutput: "",
			},
			{
				Name: "v0 config fails to upgrade",
				ConfigFiles: map[string]string{
					"godel/config/conjure-plugin.yml": `
conjure-projects:
  # comment
  project-1:
    project-file: ./conjure-project.yml
  project-2:
    project-file: foo/conjure-project.yml
  project-3:
    project-file: bar/conjure-project.yml
`,
				},
				WantError:  true,
				WantOutput: "Failed to upgrade configuration:\n\tgodel/config/conjure-plugin.yml: v0 configuration is not supported\n",
			},
			{
				Name: "blank v0 config upgrade succeeds",
				ConfigFiles: map[string]string{
					"godel/config/conjure-plugin.yml": ``,
				},
				WantFiles: map[string]string{
					"godel/config/conjure-plugin.yml": ``,
				},
				WantOutput: "",
			},
			{
				Name: "current config is unmodified",
				ConfigFiles: map[string]string{
					"godel/config/conjure-plugin.yml": `
version: 1
projects:
  sls-health-api:
    # comment
    output-dir: conjure
    ir-locator: https://publish.artifactory.com/artifactory/internal-conjure-release/com/palantir/spec/health-api/3.2.0/health-api-3.2.0.json
`,
				},
				WantOutput: "",
				WantFiles: map[string]string{
					"godel/config/conjure-plugin.yml": `
version: 1
projects:
  sls-health-api:
    # comment
    output-dir: conjure
    ir-locator: https://publish.artifactory.com/artifactory/internal-conjure-release/com/palantir/spec/health-api/3.2.0/health-api-3.2.0.json
`,
				},
			},
		},
	)
}
